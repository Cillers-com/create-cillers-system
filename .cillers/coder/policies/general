
<policy-group id="general" title="General">
    <policy id="self-documenting-names" title="Self-Documenting Code Names">
        <specification>
            Use self-documenting variable, function, class and file names. Functions should be named 
            to reflect the output they are expected to produce. Files should be named with the 
            category of functions that it contains.
        </specification>
    </policy>
    <policy id="import-organization" title="Import Grouping and Organization">
        <specification>
            Import Organization:
            Group imports as follows:
            * Standard library imports
            * Third-party library imports
            * Local application imports
            Within each group, sort imports alphabetically
        </specification>
    </policy>
    <policy id="concise-functions" title="Function Length Guidelines">
       <specification>
           All functions should be as short as possible. Move as much logic as possible out from the 
           function to helper functions.
       </specification>
    </policy>
    <policy id="package-dependencies" title="Package Dependency Management">
        <specification>
            Never use deprecated packages
            Prefer standard library packages over third-party alternatives when possible.
        </specification>
    </policy>
    <policy id="single-responsibility-files" title="Single Responsibility File Structure">
        <specification>
            Each file must only have one type of function, e.g. getting the current user or defining 
            API endpoints, to improve the organization and maintainability of the code.
        </specification>
    </policy>
    <policy id="short-functions" title="Function Length and Complexity">
        <specification>
            Functions MUST be short. Separate concerns by delegating logic to helper functions.
        </specification>
    </policy>
    <policy id="consistent-indentation" title="Code Indentation Standards">
        <specification>
            Use consistent indentation with 4 spaces per level. Do not use tabs for indentation.
        </specification>
    </policy>
    <policy id="error-handling" title="Error Handling Requirements">
        <specification>
            Errors should never be masked. If an error occurs, it must be handled properly, with 
            for example a retry, or the code should fail with a good error message.
        </specification>
    </policy>
    <policy id="minimal-variable-mutation" title="Variable Mutation Restrictions">
        <specification>
            Never change a variable, except if there is only one variable in a function and the 
            purpose of that function is to generate the object that is held in the variable.
        </specification>
    </policy>
    <policy id="immutable-params" title="Parameter Immutability">
        <specification>
            Never change a param. Treat all params as frozen objects.
        </specification>
    </policy>
    <policy id="no-trivial-comments" title="Comment Quality Standards">
        <specification>
            Never include trivial comments in the code.
        </specification>
    </policy>
    <policy id="ensure-functionality" title="Code Functionality Requirement">
        <specification>
            Make sure the code works.
        </specification>
    </policy>
    <policy id="non-zero-exit-on-failure" title="Process Exit Code Standards">
        <specification>
            The process must exit with a non-zero code if it was not successful.
        </specification>
    </policy>
    <policy id="max-100-characters-per-line" title="Line Length Limit">
        <specification>
            Max 100 characters per line.
        </specification>
    </policy>
    <policy id="anthropic-api" title="Anthropic API Integration Standards">
        <specification>
            Any code using the Anthropic Claude Sonnet REST API should be based on the following template which includes the current latest version numbers:
            curl https://api.anthropic.com/v1/messages \
                 --header "x-api-key: $ANTHROPIC_API_KEY" \
                 --header "anthropic-version: 2023-06-01" \
                 --header "content-type: application/json" \
                 --data \
            '{
                "model": "claude-3-5-sonnet-20241022",
                "max_tokens": 1,
                "messages": [
                    {"role": "user", "content": "What is latin for Ant? (A) Apoidea, (B) Rhopalocera, (C) Formicidae"},
                    {"role": "assistant", "content": "The answer is ("}
                ]
            }'
            Note that the latest model version is claude-3-5-sonnet-20241022.
        </specification>
    </policy>
    <policy id="newline-at-end-of-file" title="File Ending Standard">
        <specification>
            Always include a newline at the end of code files.
        </specification>
    </policy>
</policy-group>
