templates:
- id: stack
  run:
  - couchbase
  - couchbase-init
  - redpanda
  - redpanda-console
  - kafka-connect
  - create-connectors
  - curity-db
  - curity
  - kong
  - web-app 
  - oauth-agent
  - app-api
  - jupyter
  - graphql-client-ui
  - oauth-agent2

- id: stack-vm
  params:
    - id: web-app-url
      type: [default, str, http://localhost:8080]
    - id: graphql-client-ui-url
      type: [default, str, http://localhost:11001]
    - id: app-api-protocol-and-host 
      type: [default, str, http://localhost:8080]
    - id: curity-base-url
      type: [default, str, http://localhost:8443]
  run:
    - id: couchbase
      module: couchbase
    - id: couchbase-init
      module: couchbase-init
    - id: redpanda
      module: redpanda
    - id: redpanda-console
      module: redpanda-console
    - id: kafka-connect
      module: kafka-connect
    - id: create-connectors
      module: create-connectors
    - id: curity-db
      module: curity-db
    - id: curity
      module: curity
      args:
        web-app-url: "#pt-param web-app-url"
        graphql-client-ui-url: "#pt-param graphql-client-ui-url"
    - id: kong
      module: kong
    - id: web-app 
      module: web-app 
      args:
        app-api-protocol-and-host: "#pt-param app-api-protocol-and-host"
    - id: graphql-client-ui
      module: graphql-client-ui
      args:
        app-api-protocol-and-host: "#pt-param app-api-protocol-and-host"
    - id: oauth-agent
      module: oauth-agent
      args:
        web-app-url: "#pt-param web-app-url"
        curity-base-url: "#pt-param curity-base-url"
    - id: oauth-agent2
      module: oauth-agent2
      args:
        graphql-client-ui-url: "#pt-param graphql-client-ui-url" 
        curity-base-url: "#pt-param curity-base-url" 
    - id: app-api
      module: app-api
    - id: jupyter
      module: jupyter

- id: stack-low-memory
  run:
    - couchbase
    - id: cb-init 
      module: couchbase-init

    - module: redpanda
      run-when:
        after: cb-init
    - id: redpanda-console
      module: redpanda-console
      run-when:
        after: cb-init
    - id: kafka-connect
      module: kafka-connect
      run-when:
        after: cb-init
    - id: create-connectors
      module: create-connectors
      run-when:
        after: cb-init

    - module: curity-db
      run-when:
        after: create-connectors 
    - module: oauth-agent
      run-when:
        after: create-connectors 
    - module: curity
      run-when:
        after: create-connectors 
    - module: kong
      run-when:
        after: create-connectors 
    - module: web-app 
      run-when:
        after: create-connectors 
    - module: app-api
      run-when:
        after: create-connectors 
    - module: jupyter
      run-when:
        after: create-connectors 
    - module: graphql-client-ui
      run-when:
        after: create-connectors 
    - module: oauth-agent2
      run-when:
        after: create-connectors 

- id: stack-without-redpanda
  run:
    - couchbase
    - id: cb-init 
      module: couchbase-init

    - module: curity-db
      run-when:
        after: cb-init 
    - module: oauth-agent
      run-when:
        after: cb-init 
    - module: curity
      run-when:
        after: cb-init 
    - module: kong
      run-when:
        after: cb-init 
    - module: web-app 
      run-when:
        after: cb-init 
    - module: app-api
      run-when:
        after: cb-init 
    - module: jupyter
      run-when:
        after: cb-init 
    - module: graphql-client-ui
      run-when:
        after: cb-init 
    - module: oauth-agent2
      run-when:
        after: cb-init 

modules:
  - id: app-api
    info: The App API
    module: polytope/python
    args: 
      id: app-api
      image: gcr.io/arched-inkwell-420116/python:3.11.8-slim-bookworm
      code: { type: host, path: ./code/app-api }
      cmd: ./bin/run
      restart: { policy: on-failure }
      services: 
        - { id: "app-api", ports: [{protocol: http, port: 4000}] }
      env:
        - { name: COUCHBASE_URL, value: "couchbase://couchbase" }
        - { name: COUCHBASE_USERNAME, value: admin }
        - { name: COUCHBASE_PASSWORD, value: password }
        - { name: HTTP_PORT, value: 4000 } 
        - { name: HTTP_DEBUG, value: false } 
        - { name: HTTP_AUTORELOAD, value: true } 
        - { name: HTTP_GRAPHQL_UI, value: false } 
        - { name: AUTH_OIDC_AUDIENCE, value: http://localhost/api }
        - { name: AUTH_OIDC_JWK_URL, value: http://curity:8443/oauth/v2/oauth-anonymous/jwks }
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}
        - { path: /root/conf/, source: { type: host, path: ./conf }}

  - id: jupyter
    info: "Runs a Jupyter notebook hooked up to the Cillers stack."
    module: polytope/jupyter
    args:
      mounts:
      - path: /home/jovyan/.cache/
        source:
          type: volume
          scope: project
          id: dependency-cache
      - path: /home/jovyan/config
        source:
          path: ./conf/jupyter
          type: host
      - path: /home/jovyan/tutorials
        source:
          path: ./cillers/jupyter/tutorials
          type: host
      - path: /home/jovyan/work
        source:
          path: ./cillers/jupyter/work
          type: host

  - id: web-app
    info: The Web App
    module: polytope/node
    params:
      - id: app-api-protocol-and-host 
        type: [default, str, http://localhost:8080]
    args:
      id: web-app 
      image: gcr.io/arched-inkwell-420116/node:21.7.0-slim
      code: { type: host, path: ./code/web-app }
      cmd: ./bin/run
      env:
        - { name: PORT, value: 3000 } 
        - { name: HOST, value: 0.0.0.0 } 
        - { name: REACT_APP_API_BASE_URL, value: "#pt-js params['appApiProtocolAndHost'] + '/api'" }
        - { name: REACT_APP_OAUTH_AGENT_BASE_URL, value: "#pt-js params['appApiProtocolAndHost'] + '/oauth-agent'" }
      restart:
        policy: on-failure
      services:
        - id: web-app 
          ports: [{protocol: http, port: 3000}]
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}
        - { path: /root/.npm/, source: { type: volume, scope: project, id: npm-cache }} 
        - { path: /app/node_modules/, source: { type: volume, scope: project, id: npm-modules }}

  - id: graphql-client-ui 
    info: A GraphQL Client UI 
    module: polytope/node
    params:
      - id: app-api-protocol-and-host
        type: [default, str, http://localhost:8080]
    args:
      id: graphql-client-ui 
      image: gcr.io/arched-inkwell-420116/node:21.7.0-slim
      code: { type: host, path: ./cillers/graphql-client-ui }
      cmd: ./bin/run
      env:
        - { name: PORT, value: 11001 } 
        - { name: HOST, value: 0.0.0.0 } 
        - { name: REACT_APP_API_BASE_URL, value: "#pt-js params['appApiProtocolAndHost'] + '/api'" }
        - { name: REACT_APP_OAUTH_AGENT_BASE_URL, value: "#pt-js params['appApiProtocolAndHost'] + '/oauth-agent2'" }
      restart:
        policy: on-failure
      services:
        - id: graphql-client-ui 
          ports: [{protocol: http, port: 11001}]
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache-graphql-client-ui }}
        - { path: /root/.npm/, source: { type: volume, scope: project, id: npm-cache-graphql-client-ui }} 
        - { path: /app/node_modules/, source: { type: volume, scope: project, id: npm-modules-graphql-client-ui }}

  - id: oauth-agent
    module: polytope/container
    params:
      - id: web-app-url
        type: [default, str, http://localhost:8080]
      - id: curity-base-url
        type: [default, str, http://localhost:8443]
    args: 
      id: oauth-agent 
      image: gcr.io/arched-inkwell-420116/oauthagent:1.0.0 
      env:
        - { name: PORT, value: 3001 }
        - { name: TRUSTED_WEB_ORIGIN, value: "#pt-param web-app-url" }
        - { name: ISSUER, value: "#pt-js params['curityBaseUrl'] + '/oauth/v2/oauth-anonymous'" }
        - { name: AUTHORIZE_ENDPOINT, value: "#pt-js params['curityBaseUrl'] + '/oauth/v2/oauth-authorize'" }
        - { name: TOKEN_ENDPOINT, value: 'http://curity:8443/oauth/v2/oauth-token' }
        - { name: USERINFO_ENDPOINT, value: 'http://curity:8443/oauth/v2/oauth-userinfo' }
        - { name: LOGOUT_ENDPOINT, value: "#pt-js params['curityBaseUrl'] + '/oauth/v2/oauth-session/logout'" }
        - { name: CLIENT_ID, value: 'spa-client' }
        - { name: CLIENT_SECRET, value: 'Password1' }
        - { name: REDIRECT_URI, value: "#pt-js params['webAppUrl'] + '/auth/callback'" }
        - { name: POST_LOGOUT_REDIRECT_URI, value: "#pt-param web-app-url" }
        - { name: SCOPE, value: 'openid profile' }
        - { name: COOKIE_DOMAIN, value: 'localhost' }
        - { name: COOKIE_NAME_PREFIX, value: 'curity' }
        - { name: COOKIE_ENCRYPTION_KEY, value: 'fda91643fce9af565bdc34cd965b48da75d1f5bd8846bf0910dd6d7b10f06dfe' }
        - { name: CORS_ENABLED, value: 'false' }
        - { name: NODE_TLS_REJECT_UNAUTHORIZED, value: '0' }
      restart: { policy: on-failure }
      services: 
        - { id: oauth-agent, ports: [{protocol: http, port: 3001}]}

  - id: oauth-agent2
    module: polytope/container
    params:
      - id: graphql-client-ui-url
        type: [default, str, http://localhost:11001]
      - id: curity-base-url
        type: [default, str, http://localhost:8443]
    args: 
      id: oauth-agent2 
      image: gcr.io/arched-inkwell-420116/oauthagent:1.0.0 
      env:
        - { name: PORT, value: 3002 }
        - { name: TRUSTED_WEB_ORIGIN, value: "#pt-param graphql-client-ui-url" }
        - { name: ISSUER, value: "#pt-js params['curityBaseUrl'] + '/oauth/v2/oauth-anonymous'" }
        - { name: AUTHORIZE_ENDPOINT, value: "#pt-js params['curityBaseUrl'] + '/oauth/v2/oauth-authorize'" }
        - { name: TOKEN_ENDPOINT, value: 'http://curity:8443/oauth/v2/oauth-token' }
        - { name: USERINFO_ENDPOINT, value: 'http://curity:8443/oauth/v2/oauth-userinfo' }
        - { name: LOGOUT_ENDPOINT, value: "#pt-js params['curityBaseUrl'] + '/oauth/v2/oauth-session/logout'" }
        - { name: CLIENT_ID, value: 'graphql-ui-client' }
        - { name: CLIENT_SECRET, value: 'Password1' }
        - { name: REDIRECT_URI, value: "#pt-js params['graphqlClientUiUrl'] + '/auth/callback'" }
        - { name: POST_LOGOUT_REDIRECT_URI, value: '#pt-param graphql-client-ui-url' }
        - { name: SCOPE, value: 'openid profile' }
        - { name: COOKIE_DOMAIN, value: 'localhost' }
        - { name: COOKIE_NAME_PREFIX, value: 'curity' }
        - { name: COOKIE_ENCRYPTION_KEY, value: 'fda91643fce9af565bdc34cd965b48da75d1f5bd8846bf0910dd6d7b10f06dfe' }
        - { name: CORS_ENABLED, value: 'true' }
        - { name: NODE_TLS_REJECT_UNAUTHORIZED, value: '0' }
      restart: { policy: on-failure }
      services: 
        - { id: oauth-agent2, ports: [{protocol: http, port: 3002}]}

  - id: kong
    module: polytope/kong!simple
    args:
      image: gcr.io/arched-inkwell-420116/kong:3.6.1
      port: 3000
      env: 
        - { name: KONG_NGINX_HTTP_LUA_SHARED_DICT, value: 'phantom-token 10m' }
      plugins: 
        - { name: oauth-proxy, package: kong-oauth-proxy, version: 1.3.0 }
        - { name: phantom-token, package: kong-phantom-token, version: 2.0.0 }
      config-file: { type: host, path: ./conf/kong-dev.yml }
      autoreload: true
      services:
      - { id: kong, ports: [{ port: 3000, protocol: http, expose-as: 8080 }]}

  - id: curity
    params:
    - id: web-app-url
      type: [default, str, http://localhost:8080]
    - id: graphql-client-ui-url
      type: [default, str, http://localhost:11001]   
    module: curity-base
    args:
      image: gcr.io/arched-inkwell-420116/idsvr:9.0.1
      # log-level: DEBUG  # NOTE: uncomment when developing against curity
      config-file: { type: host, path: ./conf/curity-config.xml }
      restart: { policy: always }
      env:
        - { name: ADMIN, value: true }
        - { name: WEB_APP_URL, value: "#pt-param web-app-url" }
        - { name: GRAPHQL_CLIENT_UI_URL, value: "#pt-param graphql-client-ui-url" }
      mounts:
        - { path: /opt/idsvr/usr/bin/post-commit-cli-scripts, source: { type: host, path: ./cillers/curity/post-commit-cli-scripts }}
        - { path: /opt/idsvr/etc/init/curity-users.xml, source: { type: host, path: ./conf/curity-users.xml }}

  - id: curity-base
    info: Runs a Curity ID server container.
    default?: true
    params:
    - id: image
      info: The container image to run.
      name: Image
      type: [default, str, 'curity.azurecr.io/curity/idsvr:9.0.1-slim']
    - id: id
      info: The ID to use for the container.
      name: ID
      type: [default, str, curity-idsvr]
    - id: cmd
      info: The command to run in the container. If unspecified, runs the ID server.
      name: Command
      type:
      - maybe
      - - either
        - str
        - - [maybe, str]
    - id: env
      info: Environment variables to pass to the server.
      name: Environment variables
      type:
      - maybe
      - [env-var]
    - id: config-file
      info: The XML config file to use.
      name: Config file
      type: [maybe, mount-source]
    - id: mounts
      info: Code or files to mount into the container.
      name: Mounts
      type:
      - maybe
      - - {source: mount-source, path: absolute-path}
    - id: restart
      info: What policy to apply on restarting containers that fail.
      name: Restart policy
      type:
      - maybe
      - policy: [enum, always, on-failure]
        max-restarts: [maybe, int]
    - id: log-level
      info: The log level for the ID server.
      name: Log level
      type: [default, str, INFO]
    module: polytope/container
    args:
      image: '#pt-clj (:image params)'
      id: '#pt-clj (:id params)'
      env: |-
        #pt-clj (concat
         [(when (:log-level params)
           {:name  "LOGGING_LEVEL"
            :value (:log-level params)})]
         (:env params))
      mounts: |-
        #pt-clj (->>
         [(when-let [f (:config-file params)]
           {:path   "/opt/idsvr/etc/init/config.xml"
            :source f})]
         (concat (:mounts params))
         (remove nil?))
      services:
      - id: curity
        ports:
        - {port: 6749, protocol: http, label: admin}
        - {port: 8443, protocol: http, label: api}
      restart: '#pt-clj (:restart params)'
      cmd: '#pt-clj (:cmd params)'

  - id: curity-db
    module: polytope/postgres
    args:
      image: gcr.io/arched-inkwell-420116/postgres:16.2
      data-volume: { type: volume, scope: project, id: curity-db-data }
      service-id: curity-db
      env:
        - { name: POSTGRES_HOST_AUTH_METHOD, value: trust }
        - { name: POSTGRES_DB, value: idsvr }
      scripts:
        - { type: host, path: ./conf/curity-db.sql }
      restart: { policy: on-failure }

  - id: couchbase
    module: polytope/couchbase
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      data-volume: { type: volume, scope: project, id: couchbase-data }

  - id: couchbase-init
    module: polytope/python
    args:
      image: gcr.io/arched-inkwell-420116/python:3.11.8-slim-bookworm
      code: { type: host, path: ./cillers/init-couchbase }
      cmd: ./bin/run
      env:
        - { name: COUCHBASE_HOST, value: "couchbase" }
        - { name: COUCHBASE_TLS, value: false }
        - { name: COUCHBASE_USERNAME, value: admin }
        - { name: COUCHBASE_PASSWORD, value: password }
        - { name: COUCHBASE_MAIN_BUCKET_NAME, value: main }
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}
        - { path: /root/conf/, source: { type: host, path: ./conf }}

  - id: redpanda
    info: Runs the Redpanda server in dev mode
    module: polytope/redpanda
    args:
      image: docker.redpanda.com/redpandadata/redpanda:v23.3.11
      root-log-level: warn 
      data-volume: { id: redpanda-data, type: volume, scope: project }

  - id: redpanda-console
    info: Runs the Redpanda Console service
    module: redpanda-console-base
    args: 
      image: docker.redpanda.com/redpandadata/console:v2.4.5
      container-id: redpanda-console
      brokers: [{host: redpanda, port: 9092}]
      log-level: info
      port: 8079
      restart: { policy: always }

  - id: redpanda-console-base
    info: Runs the Redpanda console.
    params:
    - id: image
      info: The image to use.
      name: Image
      type: [default, str, 'docker.redpanda.com/redpandadata/console:v2.4.5']
    - id: container-id
      info: The ID to give the spawned container.
      name: Container ID
      type: [default, str, redpanda-console]
    - id: brokers
      info: List of host-port pairs to use to connect to the Kafka/Redpanda cluster.
      name: Brokers
      type:
      - default
      - - {host: str, port: int}
      - - {host: redpanda, port: 9092}
    - id: schema-registry-url
      info: Schema Registry to connect to.
      name: Schema Registry URL
      type: [maybe, str]
    - id: admin-url
      info: Redpanda admin URL to connect to.
      name: Redpanda admin URL
      type: [maybe, str]
    - id: log-level
      info: The log level.
      name: Log level
      type:
      - default
      - [enum, debug, info, warn, error, fatal]
      - info
    - id: port
      info: The console HTTP port.
      name: HTTP Port
      type: [default, int, 8079]
    - id: restart
      info: Restart policy for the container.
      name: Restart policy
      type:
      - default
      - policy: [enum, always, on-failure]
        max-restarts: [maybe, int]
      - {policy: always, max-restarts: null}
    module: polytope/container
    args:
      image: '#pt-clj (:image params)'
      id: '#pt-clj (:container-id params)'
      env:
      - {name: CONFIG_FILEPATH, value: /etc/redpanda-console-config.yaml}
      mounts:
      - path: /etc/redpanda-console-config.yaml
        source:
          type: host
          path: ./conf/redpanda-console.yml 
      restart: '#pt-clj (:restart params)'
      services:
      - id: redpanda-console
        ports:
        - {port: '#pt-clj (:port params)', protocol: http}

  - id: kafka-connect
    info: Runs the Kafka connect service
    module: polytope/kafka!connect
    args:
      image: gcr.io/arched-inkwell-420116/cp-kafka-connect:7.5.1
      container-id: kafka-connect-container
      connectors:
        - couchbase/kafka-connect-couchbase:4.1.13
        - confluentinc/kafka-connect-http:1.7.3
      bootstrap-servers: [{host: redpanda, port: 9092}]
      group-id: kafka-connect
      config-topic: kafka-connect-config
      config-replication-factor: 1
      offset-topic: kafka-connect-offset
      offset-replication-factor: 1
      status-topic: kafka-connect-status
      status-replication-factor: 1
      key-converter: org.apache.kafka.connect.json.JsonConverter
      value-converter: org.apache.kafka.connect.json.JsonConverter
      root-log-level: WARN
      port: 8083
      restart: { policy: always }

  - id: create-connectors
    module: polytope/kafka!create-connectors
    args:
      image: gcr.io/arched-inkwell-420116/curl:latest
      host: kafka-connect
      connectors:
        - name: couchbase-items-sink
          config:
            name:                           couchbase-items-sink
            connector.class:                com.couchbase.connect.kafka.CouchbaseSinkConnector
            tasks.max:                      '2'
            topics:                         items
            couchbase.seed.nodes:           couchbase
            couchbase.bootstrap.timeout:    10s
            couchbase.bucket:               main
            couchbase.default.collection:   _default.items
            couchbase.document.id:          ${/id}
            couchbase.username:             admin
            couchbase.password:             password
            key.converter:                  org.apache.kafka.connect.storage.StringConverter
            value.converter:                org.apache.kafka.connect.json.JsonConverter
            value.converter.schemas.enable: 'false'

