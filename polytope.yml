templates:
- id: stack
  run:
  - couchbase
  - redpanda
  - redpanda-console
  - kafka-connect
  - curity
  - curity-db
  - oauth-agent
  - kong
  - web-app 
  - app-api
  - id: couchbase-ensure-cluster-initialized-step
    module: couchbase-ensure-cluster-initialized
  - id: couchbase-bucket-create-step
    module: couchbase-bucket-create
    run-when:
      after: couchbase-ensure-cluster-initialized-step
  - module: couchbase-bucket-init
    run-when:
      after: couchbase-bucket-create-step
  - create-connectors

- id: change
  run: 
  - couchbase
  - redpanda
  - cillers-change

- id: init-couchbase
  run: 
  - couchbase
  - couchbase-ensure-cluster-initialized

modules:
  - id: cillers-manager
    info: The Cillers Manager 
    module: polytope/python
    params: 
      - id: id
        info: ID
        name: Id
        type: str
      - id: environment
        info: The environment to manage.
        name: Environment
        type: [default, str, development]
      - id: command
        info: The command to run
        name: Command
        type: str
    args: 
      id: "#pt-param id" 
      image: gcr.io/arched-inkwell-420116/python:3.11.8-slim-bookworm
      code: { type: host, path: ./cillers/manager }
      cmd: "#pt-clj (str \"./bin/run \" (:command params))" 
      env:
        - { name: ENVIRONMENT, value: "#pt-param environment" }
        - { name: COUCHBASE_PRODUCTION_API_USERNAME, value: "api" }
        - { name: COUCHBASE_PRODUCTION_API_PASSWORD, value: "xxx" }
        - { name: COUCHBASE_PRODUCTION_CHANGE_USERNAME, value: "change" }
        - { name: COUCHBASE_PRODUCTION_CHANGE_PASSWORD, value: "xxx" }
        - { name: COUCHBASE_STAGE_API_USERNAME, value: "api" }
        - { name: COUCHBASE_STAGE_API_PASSWORD, value: "xxx" }
        - { name: COUCHBASE_STAGE_CHANGE_USERNAME, value: "change" }
        - { name: COUCHBASE_STAGE_CHANGE_PASSWORD, value: "xxx" }
        - { name: COUCHBASE_DEFAULT_ADMIN_USERNAME, value: "admin" }
        - { name: COUCHBASE_DEFAULT_ADMIN_PASSWORD, value: "password" }
        - { name: REDPANDA_PRODUCTION_API_USERNAME, value: "api" }
        - { name: REDPANDA_PRODUCTION_API_PASSWORD, value: "xxx" }
        - { name: REDPANDA_PRODUCTION_CHANGE_USERNAME, value: "change" }
        - { name: REDPANDA_PRODUCTION_CHANGE_PASSWORD, value: "xxx" }
        - { name: REDPANDA_STAGE_API_USERNAME, value: "api" }
        - { name: REDPANDA_STAGE_API_PASSWORD, value: "xxx" }
        - { name: REDPANDA_STAGE_CHANGE_USERNAME, value: "change" }
        - { name: REDPANDA_STAGE_CHANGE_PASSWORD, value: "xxx" }
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}
        - { path: /root/conf, source: { type: host, path: "./conf/cillers" }} 

  - id: cillers-change
    info: The Cillers Change Maker
    module: cillers-manager
    params: 
      - id: environment
        info: The environment to manage.
        name: Environment
        type: [default, str, development]
    args: 
      id: cillers-change 
      command: change

  - id: cillers-validate-conf 
    info: The Cillers Change Maker
    module: cillers-manager
    params: 
      - id: environment
        info: The environment to manage.
        name: Environment
        type: [default, str, development]
    args: 
      id: cillers-validate-conf 
      command: validate_conf 

  - id: app-api
    info: The App API
    module: polytope/python
    args: 
      id: app-api
      image: gcr.io/arched-inkwell-420116/python:3.11.8-slim-bookworm
      code: { type: host, path: ./code/app-api }
      cmd: ./bin/run
      restart: { policy: on-failure }
      services: 
        - { id: "app-api", ports: [{protocol: http, port: 4000}] }
      env:
        - { name: COUCHBASE_URL, value: "couchbase://couchbase" }
        - { name: COUCHBASE_USERNAME, value: admin }
        - { name: COUCHBASE_PASSWORD, value: password }
        - { name: HTTP_PORT, value: 4000 } 
        - { name: HTTP_DEBUG, value: false } 
        - { name: HTTP_AUTORELOAD, value: true } 
        - { name: HTTP_GRAPHQL_UI, value: false } 
        - { name: AUTH_OIDC_AUDIENCE, value: http://localhost/api }
        - { name: AUTH_OIDC_JWK_URL, value: https://curity:8443/oauth/v2/oauth-anonymous/jwks }
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}

  - id: app-api-aihack
    info: The App API
    module: polytope/python
    args: 
      id: app-api-aihack
      image: gcr.io/arched-inkwell-420116/python:3.11.8-slim-bookworm
      code: { type: host, path: ./code/aihack/app-api }
      cmd: ./bin/run
      restart: { policy: on-failure }
      services: 
        - { id: "app-api", ports: [{protocol: http, port: 4000}] }
      env:
        - { name: COUCHBASE_URL, value: "couchbase://couchbase" }
        - { name: COUCHBASE_USERNAME, value: admin }
        - { name: COUCHBASE_PASSWORD, value: password }
        - { name: HTTP_PORT, value: 4000 } 
        - { name: HTTP_DEBUG, value: false } 
        - { name: HTTP_AUTORELOAD, value: true } 
        - { name: HTTP_GRAPHQL_UI, value: false } 
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}

  - id: web-app
    info: The Web App
    module: polytope/node
    args:
      id: web-app 
      image: gcr.io/arched-inkwell-420116/node:21.7.0-slim
      code: { type: host, path: ./code/web-app }
      cmd: ./bin/run
      env:
        - { name: PORT, value: 3000 } 
        - { name: HOST, value: 0.0.0.0 } 
        - { name: REACT_APP_API_BASE_URL, value: http://localhost:8080/api } 
        - { name: REACT_APP_OAUTH_AGENT_BASE_URL, value: http://localhost:8080/oauth-agent } 
      restart:
        policy: on-failure
      services:
        - id: web-app 
          ports: [{protocol: http, port: 3000}]
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}
        - { path: /root/.npm/, source: { type: volume, scope: project, id: npm-cache }} 
        - { path: /app/node_modules/, source: { type: volume, scope: project, id: npm-modules }}

  - id: web-app-aihack
    info: The Web App
    module: polytope/node
    args:
      id: web-app 
      image: gcr.io/arched-inkwell-420116/node:21.7.0-slim
      code: { type: host, path: ./code/aihack/web-app }
      cmd: ./bin/run
      env:
        - { name: PORT, value: 3000 } 
        - { name: HOST, value: 0.0.0.0 } 
        - { name: REACT_APP_API_BASE_URL, value: http://localhost:4000/api } 
      restart:
        policy: on-failure
      services:
        - id: web-app 
          ports: [{protocol: http, port: 3000}]
      mounts:
        - { path: /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}
        - { path: /root/.npm/, source: { type: volume, scope: project, id: npm-cache }} 
        - { path: /app/node_modules/, source: { type: volume, scope: project, id: npm-modules }}

  - id: oauth-agent
    info: The OAuth Agent
    module: polytope/container
    args: 
      id: oauth-agent 
      image: gcr.io/arched-inkwell-420116/oauthagent:1.0.0 
      env:
        - { name: PORT, value: 3001 }
        - { name: TRUSTED_WEB_ORIGIN, value: 'http://localhost:8080' }
        - { name: ISSUER, value: 'https://localhost:8443/oauth/v2/oauth-anonymous' }
        - { name: AUTHORIZE_ENDPOINT, value: 'https://localhost:8443/oauth/v2/oauth-authorize' }
        - { name: TOKEN_ENDPOINT, value: 'https://curity:8443/oauth/v2/oauth-token' }
        - { name: USERINFO_ENDPOINT, value: 'https://curity:8443/oauth/v2/oauth-userinfo' }
        - { name: LOGOUT_ENDPOINT, value: 'https://localhost:8443/oauth/v2/oauth-session/logout' }
        - { name: CLIENT_ID, value: 'spa-client' }
        - { name: CLIENT_SECRET, value: 'Password1' }
        - { name: REDIRECT_URI, value: 'http://localhost:8080/auth/callback' }
        - { name: POST_LOGOUT_REDIRECT_URI, value: 'http://localhost:8080/' }
        - { name: SCOPE, value: 'openid profile' }
        - { name: COOKIE_DOMAIN, value: 'localhost' }
        - { name: COOKIE_NAME_PREFIX, value: 'curity' }
        - { name: COOKIE_ENCRYPTION_KEY, value: 'fda91643fce9af565bdc34cd965b48da75d1f5bd8846bf0910dd6d7b10f06dfe' }
        - { name: CORS_ENABLED, value: 'false' }
        - { name: NODE_TLS_REJECT_UNAUTHORIZED, value: '0' }
      restart: { policy: on-failure }
      services: 
        - { id: oauth-agent, ports: [{protocol: http, port: 3001}]}

  - id: oauth-agent-code
    info: The OAuth Agent, running local code
    module: polytope/node
    args: 
      id: oauth-agent 
      image: gcr.io/arched-inkwell-420116/node:21.7.0-slim
      code: { type: host, path: ../oauth-agent-node-express }
      cmd: ./bin/run 
      env:
        - { name: PORT, value: 3001 }
        - { name: TRUSTED_WEB_ORIGIN, value: 'http://localhost:8080' }
        - { name: ISSUER, value: 'https://localhost:8443/oauth/v2/oauth-anonymous' }
        - { name: AUTHORIZE_ENDPOINT, value: 'https://localhost:8443/oauth/v2/oauth-authorize' }
        - { name: TOKEN_ENDPOINT, value: 'https://curity:8443/oauth/v2/oauth-token' }
        - { name: USERINFO_ENDPOINT, value: 'https://curity:8443/oauth/v2/oauth-userinfo' }
        - { name: LOGOUT_ENDPOINT, value: 'https://localhost:8443/oauth/v2/oauth-session/logout' }
        - { name: CLIENT_ID, value: 'spa-client' }
        - { name: CLIENT_SECRET, value: 'Password1' }
        - { name: REDIRECT_URI, value: 'http://localhost:8080/auth/callback' }
        - { name: POST_LOGOUT_REDIRECT_URI, value: 'http://localhost:8080/' }
        - { name: SCOPE, value: 'openid profile' }
        - { name: COOKIE_DOMAIN, value: 'localhost' }
        - { name: COOKIE_NAME_PREFIX, value: 'curity' }
        - { name: COOKIE_ENCRYPTION_KEY, value: 'fda91643fce9af565bdc34cd965b48da75d1f5bd8846bf0910dd6d7b10f06dfe' }
        - { name: CORS_ENABLED, value: 'false' }
        - { name: NODE_TLS_REJECT_UNAUTHORIZED, value: '0' }
      restart: { policy: on-failure }
      services:
        - { id: oauth-agent, ports: [{protocol: http, port: 3001}]}
      mounts:
        - path: { /root/.cache/, source: { type: volume, scope: project, id: dependency-cache }}
        - path: { /root/.npm/, source: { type: volume, scope: project, id: npm-cache }}
        - path: { /app/node_modules/, source: { type: volume, scope: project, id: npm-modules }}

  - id: kong
    module: polytope/kong!simple
    args:
      image: gcr.io/arched-inkwell-420116/kong:3.6.1
      port: 3000
      env: 
        - { name: KONG_NGINX_HTTP_LUA_SHARED_DICT, value: 'phantom-token 10m' }
      plugins: 
        - { name: oauth-proxy, package: kong-oauth-proxy, version: 1.3.0 }
        - { name: phantom-token, package: kong-phantom-token, version: 2.0.0 }
      config-file: { type: host, path: ./conf/kong/kong-dev.yml }
      autoreload: true
      services:
      - { id: kong, ports: [{ port: 3000, protocol: http, expose-as: 8080 }]}

  - id: curity
    module: polytope/curity
    args:
      image: gcr.io/arched-inkwell-420116/idsvr:9.0.1
      password: password
      # log-level: DEBUG  # NOTE: uncomment when developing against curity
      license-file: { type: host, path: ./conf/curity/curity-license.json }
      config-file: { type: host, path: ./conf/curity/curity-config.xml }
      restart: { policy: always }

  - id: curity-db
    module: polytope/postgres
    args:
      image: gcr.io/arched-inkwell-420116/postgres:16.2
      data-volume: { type: volume, scope: project, id: curity-db-data }
      service-id: curity-db
      env:
        - { name: POSTGRES_HOST_AUTH_METHOD, value: trust }
        - { name: POSTGRES_DB, value: idsvr }
      scripts:
        - { type: host, path: ./conf/curity/curity-db.sql }
      restart: { policy: on-failure }

  - id: couchbase
    module: couchbase-base
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      data-volume: { type: volume, scope: project, id: couchbase-data }

  - id: couchbase-base
    info: Runs a Couchbase container.
    params:
    - id: image
      info: The container image to use.
      name: Image
      type: [default, str, 'public.ecr.aws/docker/library/couchbase:community-7.2.4']
    - id: id
      info: The ID of the container to spawn.
      name: ID
      type: [default, str, couchbase]
    - id: cmd
      info: The command to run in the container. If unspecified, runs the Couchbase server.
      name: Command
      type:
      - maybe
      - - either
        - str
        - - [maybe, str]
    - id: data-volume
      name: Data Volume
      info: The volume (if any) to mount for data.
      type: [maybe, mount-source]
    - id: services
      info: Ports to expose as services.
      name: Services
      type:
      - maybe
      - [service-spec]
    - id: mounts
      info: Code or files to mount into the container.
      name: Mounts
      type:
      - maybe
      - - {source: mount-source, path: absolute-path}
    - id: restart
      info: What policy to apply on restarting containers that fail.
      name: Restart policy
      type:
      - maybe
      - policy: [enum, always, on-failure]
        max-restarts: [maybe, int]
    module: polytope/container
    args:
      image: '#pt-clj (:image params)'
      id: '#pt-clj (:id params)'
      services: |-
        #pt-clj (or
         (:services params)
         [{:id    :couchbase
          :ports [{:internal true
                   :label    :epmd
                   :port     4369
                   :protocol :tcp}
                  {:label :http, :port 8091, :protocol :http}
                  {:label :capi, :port 8092, :protocol :http}
                  {:label :query, :port 8093, :protocol :http}
                  {:label :fts, :port 8094, :protocol :http}
                  {:label :cbas, :port 8095, :protocol :http}
                  {:label :eventing, :port 8096, :protocol :http}
                  {:label :backup, :port 8097, :protocol :http}
                  {:internal true
                   :label    :indexer
                   :protocol :tcp
                   :range    "9100-9105"}
                  {:internal true
                   :label    :analytics
                   :protocol :tcp
                   :range    "9110-9122"}
                  {:label :prometheus, :port 9123, :protocol :tcp}
                  {:internal true
                   :label    :backup-grpc
                   :port     9124
                   :protocol :tcp}
                  {:internal true
                   :label    :fts-grpc
                   :port     9130
                   :protocol :tcp}
                  {:internal true
                   :label    :eventing-debug
                   :port     9140
                   :protocol :tcp}
                  {:internal true
                   :label    :indexer
                   :port     9999
                   :protocol :tcp}
                  {:label    :memcached-ssl
                   :port     11207
                   :protocol :tcp}
                  {:label    :memcached
                   :protocol :tcp
                   :range    "11209-11210"}
                  {:label    :memcached-prometheus
                   :port     11280
                   :protocol :tcp}
                  {:internal true
                   :label    :cluster-management
                   :port     21100
                   :protocol :tcp}
                  {:internal true
                   :label    :cluster-management
                   :port     21150
                   :protocol :tcp}
                  {:label :http-ssl, :port 18091, :protocol :http}
                  {:label :capi-ssl, :port 18092, :protocol :http}
                  {:label :query-ssl, :port 18093, :protocol :http}
                  {:label :fts-ssl, :port 18094, :protocol :http}
                  {:label :cbas-ssl, :port 18095, :protocol :http}
                  {:label    :eventing-ssl
                   :port     18096
                   :protocol :http}
                  {:label    :backup-ssl
                   :port     18097
                   :protocol :http}]}])
      cmd: |-
        #pt-clj (when-let [c (:cmd params)]
          (if (string? c)
            c
            (remove nil? c)))
      mounts: |-
        #pt-clj (concat
         (when-let [v (:data-volume params)]
          [{:path "/opt/couchbase/var", :source v}])
         (:mounts params))
      restart: '#pt-clj (:restart params)'

  - id: couchbase-ensure-cluster-initialized
    module: couchbase-ensure-cluster-initialized-base
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      cluster: couchbase:8091
      username: admin
      password: password
      retries: 20

  - id: couchbase-ensure-cluster-initialized-base
    info: Initializes a new Couchbase cluster
    params:
    - id: image
      info: The container image to use.
      name: Image
      type: [default, str, 'public.ecr.aws/docker/library/couchbase:community-7.2.4']
    - {id: cluster, info: The cluster URL to connect to., name: Cluster, type: str}
    - {id: username, info: The cluster username to use., name: Username, type: str}
    - {id: password, info: The cluster password to use., name: Password, type: str}
    - id: services
      info: Services to expose.
      name: Services
      type:
      - default
      - [str]
      - [data, index, query]
    - id: ram
      info: Sets the RAM quota in MB for the data service of the cluster.
      name: Cluster RAM size
      type: [default, int, 256]
    - id: index-ram
      info: Sets the RAM quota in MB for the index service of the cluster.
      name: Index RAM size
      type: [default, int, 256]
    - id: eventing-ram
      info: Sets the RAM quota in MB for the eventing service of the cluster.
      name: Eventing RAM size
      type: [default, int, 256]
    - id: fts-ram
      info: Sets the RAM quota in MB for the full-text search (FTS) service of the cluster.
      name: FTS RAM size
      type: [default, int, 256]
    - id: retries
      info: Number of times to retry on failure.
      name: Retries
      type: [maybe, int]
    module: couchbase-base
    args:
      image: '#pt-clj (:image params)'
      id: init-couchbase-cluster
      cmd: |-
        #pt-clj (let [svc (set (:services params))]
          ["sh"
           "-c"
           (str
            "output=$("
            (clojure.string/join
            " "
            ["couchbase-cli"
            "cluster-init"
            (str "--cluster=" (:cluster params))
            (str
             "--cluster-username="
             (:username params))
            (str
             "--cluster-password="
             (:password params))
            (str
             "--services="
             (clojure.string/join "," svc))
            (when (svc "data")
              (str "--cluster-ramsize=" (:ram params)))
            (when (svc "index")
              (str
               "--cluster-index-ramsize="
               (:index-ram params)))
            (when (svc "eventing")
              (str
               "--cluster-eventing-ramsize="
               (:eventing-ram params)))
            (when (svc "fts")
              (str
               "--cluster-fts-ramsize="
               (:eventing-ram params)))])
            ") && echo \"$output\" || (echo \"$output\" | grep -q 'already initialized' && echo \"$output\" && exit 0 || echo \"$output\" && exit 1)")])
      restart: |-
        #pt-clj (when-let [n (:retries params)]
          {:max-restarts n, :policy "on-failure"})
      services: []
    default?: false

  - id: init-couchbase-cluster-aihack
    module: polytope/couchbase!init-cluster
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      cluster: couchbase:8091
      username: admin
      password: password
      retries: 20
      services: [data, index, query, fts, eventing]

  - id: couchbase-bucket-create
    module: polytope/couchbase!create-bucket
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      cluster: couchbase:8091
      username: admin
      password: password
      name: main
      retries: 20

  - id: couchbase-bucket-init
    module: polytope/couchbase!cbq
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      cluster: couchbase
      username: admin
      password: password
      script: |
        CREATE COLLECTION main._default.products IF NOT EXISTS;
        CREATE PRIMARY INDEX IF NOT EXISTS ON main;
        CREATE PRIMARY INDEX IF NOT EXISTS ON main._default.products;
      retries: 20

  - id: init-couchbase-bucket-aihack
    module: polytope/couchbase!cbq
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      cluster: couchbase
      username: admin
      password: password
      script: |
        CREATE COLLECTION main._default.items IF NOT EXISTS;
        CREATE PRIMARY INDEX IF NOT EXISTS ON main;
        CREATE PRIMARY INDEX IF NOT EXISTS ON main._default.items;
      retries: 20

  - id: redpanda
    info: Runs the Redpanda server in dev mode
    module: redpanda-base
    args:
      image: docker.redpanda.com/redpandadata/redpanda:v23.3.11
      root-log-level: warn 
      data-volume: { id: redpanda-data, type: volume, scope: project }

  - id: redpanda-base
    params:
    - id: image
      info: The container image to use.
      name: Container Image
      type: [default, str, 'docker.redpanda.com/redpandadata/redpanda:v23.3.11']
    - id: data-volume
      info: Volume to use for data.
      name: Data Volume
      type: [maybe, mount-source]
    - id: log-level
      info: The default log level.
      name: Log level
      type:
      - default
      - [enum, trace, debug, info, warn, error]
      - info
    - id: restart
      info: Restart policy for the containers.
      name: Restart policy
      type:
      - default
      - policy: [enum, always, on-failure]
        max-restarts: [maybe, int]
      - {policy: always, max-restarts: null}
    module: polytope/container
    args:
      id: redpanda
      image: '#pt-clj (:image params)'
      restart: '#pt-clj (:restart params)'
      cmd:
      - redpanda
      - start
      - --kafka-addr=0.0.0.0:9092
      - --advertise-kafka-addr=redpanda:9092
      - --pandaproxy-addr=0.0.0.0:8082
      - --advertise-pandaproxy-addr=redpanda:8082
      - --rpc-addr=0.0.0.0:33145
      - --advertise-rpc-addr=redpanda:33145
      - --schema-registry-addr=0.0.0.0:8081
      - --mode=dev-container
      - --smp=1
      - |-
        #pt-clj (str
         "--default-log-level="
         (:log-level params))
      mounts: |-
        #pt-clj (when-let [v (:data-volume params)]
          [{:path "/var/lib/redpanda/data", :source v}])
      services:
      - id: redpanda
        ports:
        - {port: 9092, protocol: tcp, label: kafka}
        - {port: 8082, protocol: http, label: pandaproxy}
        - {port: 8081, protocol: http, label: schema-registry}
        - {port: 9644, protocol: http, label: admin-api}
        - {port: 33145, protocol: tcp, label: rpc}

  - id: redpanda-console
    info: Runs the Redpanda Console service
    module: polytope/redpanda!console
    args: 
      image: docker.redpanda.com/redpandadata/console:v2.4.5
      container-id: redpanda-console
      brokers: [{host: redpanda, port: 9092}]
      log-level: info
      port: 8079
      restart: { policy: always }

  - id: kafka-connect
    info: Runs the Kafka connect service
    module: polytope/kafka!connect
    args:
      image: gcr.io/arched-inkwell-420116/cp-kafka-connect:7.5.1
      container-id: kafka-connect-container
      connectors:
        - couchbase/kafka-connect-couchbase:4.1.13
        - confluentinc/kafka-connect-http:1.7.3
      bootstrap-servers: [{host: redpanda, port: 9092}]
      group-id: kafka-connect
      config-topic: kafka-connect-config
      config-replication-factor: 1
      offset-topic: kafka-connect-offset
      offset-replication-factor: 1
      status-topic: kafka-connect-status
      status-replication-factor: 1
      key-converter: org.apache.kafka.connect.json.JsonConverter
      value-converter: org.apache.kafka.connect.json.JsonConverter
      root-log-level: WARN
      port: 8083
      restart: { policy: always }

  - id: create-connectors
    module: polytope/kafka!create-connectors
    args:
      image: gcr.io/arched-inkwell-420116/curl:latest
      host: kafka-connect
      connectors:
        - name: couchbase-products-sink
          config:
            name:                           couchbase-products-sink
            connector.class:                com.couchbase.connect.kafka.CouchbaseSinkConnector
            tasks.max:                      '2'
            topics:                         products
            couchbase.seed.nodes:           couchbase
            couchbase.bootstrap.timeout:    10s
            couchbase.bucket:               main
            couchbase.default.collection:   _default.products
            couchbase.document.id:          ${/id}
            couchbase.username:             admin
            couchbase.password:             password
            key.converter:                  org.apache.kafka.connect.storage.StringConverter
            value.converter:                org.apache.kafka.connect.json.JsonConverter
            value.converter.schemas.enable: 'false'

