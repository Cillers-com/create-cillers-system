templates:
- id: stack
  run:
  - couchbase
  - id: init-cb-cluster
    module: init-couchbase-cluster
  - id: create-cb-bucket
    module: create-couchbase-bucket
    run-when:
      after: init-cb-cluster
  - module: init-couchbase-bucket
    run-when:
      after: create-cb-bucket
  - curity-db
  - oauth-agent
  - curity
  - kong
  - web-app 
  - app-api
  #- ingest-api
  #- kafka
  #- kafka-connect
  #- create-connectors
 # - mailpit
modules:
  - id: app-api-base
    info: Base module for the app-api.
    params:
      - id: cmd
        info: The command to run.
        type: [default, [either, str, [str]], bash]
      - id: dev-mode
        info: Whether to run in dev mode (with hot reload, debugging).
        type: [default, bool, true]
      - id: container-id
        info: The ID to use for the container.
        type: [default, str, app-api]
      - id: services
        info: Services to expose.
        type: [maybe, [service-spec]]
      - id: restart
        type: [maybe, {policy: [enum, always, on-failure]}]
    module: polytope/python
    args:
      image: gcr.io/arched-inkwell-420116/python:3.11.8-slim-bookworm
      cmd: "#pt-param cmd"
      code:
        type: host
        path: ./code/app-api
      env:
        - name: COUCHBASE_URL
          value: couchbase://couchbase
        - name: COUCHBASE_USERNAME
          value: admin
        - name: COUCHBASE_PASSWORD
          value: password
        - name: HTTP_PORT
          value: 4000
        - name: HTTP_DEBUG
          value: false  # NOTE: set to true to debug HTTP calls
        - name: HTTP_AUTORELOAD
          value: "#pt-param dev-mode"
        - name: HTTP_GRAPHQL_UI
          value: "#pt-param dev-mode"
        - name: AUTH_OIDC_AUDIENCE
          value: http://localhost/api 
        - name: AUTH_OIDC_JWK_URL
          value: https://curity:8443/oauth/v2/oauth-anonymous/jwks
      id: "#pt-param container-id"
      mounts:
        - path: /root/.cache/
          source:
            type: volume
            scope: project
            id: dependency-cache
      services: "#pt-param services"
      restart: "#pt-param restart"
  - id: app-api
    info: Runs the app-api service.
    module: app-api-base
    args:
      cmd: ./bin/run
      restart:
        policy: on-failure
      services:
        - id: app-api
          ports: [{protocol: http, port: 4000}]
  - id: ingest-api-base
    info: Base module for the ingest-api service.
    params:
      - id: cmd
        info: The command to run.
        type: [default, [either, str, [str]], bash]
      - id: dev-mode
        info: Whether to run in dev mode (with hot reload, debugging).
        type: [default, bool, true]
      - id: container-id
        info: The ID to use for the container.
        type: [default, str, ingest-api]
      - id: services
        info: Services to expose.
        type: [maybe, [service-spec]]
      - id: restart
        type: [maybe, {policy: [enum, always, on-failure]}]
    module: polytope/python
    args:
      image: gcr.io/arched-inkwell-420116/python:3.11.8-slim-bookworm
      cmd: "#pt-param cmd"
      code:
        type: host
        path: ./code/ingest-api
      env:
        - name: HTTP_PORT
          value: 3002
        - name: HTTP_DEBUG
          value: false   # NOTE: set to true to debug HTTP calls
        - name: HTTP_AUTORELOAD
          value: "#pt-param dev-mode"
        - name: KAFKA_BROKER
          value: kafka:9092
        - name: AUTH_OIDC_AUDIENCE
          value: www
        - name: AUTH_OIDC_JWK_URL
          value: https://curity:8443/oauth/v2/oauth-anonymous/jwks
      id: "#pt-param container-id"
      mounts:
        - path: /root/.cache/
          source:
            type: volume
            scope: project
            id: dependency-cache
      services: "#pt-param services"
      restart: "#pt-param restart"
  - id: ingest-api 
    info: Runs the ingest-api service.
    module: ingest-api-base
    args:
      image: gcr.io/arched-inkwell-420116/python:3.11.8-slim-bookworm
      cmd: ./bin/run
      restart:
        policy: on-failure
      services:
        - id: ingest-api 
          ports: [{protocol: http, port: 3002}]
  - id: web-app-base
    info: Base module for the web app.
    module: polytope/node
    params:
      - id: cmd
        info: The command to run.
        type: [default, [either, str, [str]], bash]
      - id: env
        info: Environment variables to pass to the container.
        type: [maybe, [env-var]]
      - id: container-id
        info: The ID to use for the container.
        type: [default, str, web-app]
      - id: services
        info: Services to expose.
        type: [maybe, [service-spec]]
      - id: restart
        type: [maybe, {policy: [enum, always, on-failure]}]
    args:
      cmd: "#pt-param cmd"
      code:
        type: host
        path: ./code/web-app
      env: "#pt-param env"
      id: "#pt-param container-id"
      mounts:
        - path: /root/.cache/
          source:
            type: volume
            scope: project
            id: dependency-cache
        - path: /root/.npm/
          source:
            type: volume
            scope: project
            id: npm-cache
      restart: "#pt-param restart"
      services: "#pt-param services"
  - id: web-app 
    info: Builds and serves the web app using a devlopment server.
    module: web-app-base
    args:
      image: gcr.io/arched-inkwell-420116/node:21.7.0-slim
      cmd: ./bin/run
      env:
        - name: PORT
          value: 3000
        - name: HOST
          value: 0.0.0.0
        - name: REACT_APP_API_BASE_URL
          value: http://localhost:8080/api
        - name: REACT_APP_OAUTH_AGENT_BASE_URL
          value: http://localhost:8080/oauth-agent
        - name: REACT_APP_OIDC_CLIENT_ID
          value: spa-client  
        - name: REACT_APP_OIDC_AUTHORITY
          value: https://localhost:8443/oauth/v2/oauth-anonymous
      restart:
        policy: on-failure
      services:
        - id: web-app 
          ports: [{protocol: http, port: 3000}]
  - id: oauth-agent-base
    info: Base module for the oauth-agent.
    params:
      - id: cmd
        info: The command to run.
        type: [maybe, [either, str, [str]]]
      - id: env 
        info: Environment variables to pass to the container.
        type: [maybe, [env-var]]
      - id: container-id
        info: The ID to use for the container.
        type: [default, str, oauth-agent]
      - id: services
        info: Services to expose.
        type: [maybe, [service-spec]]
      - id: restart
        type: [maybe, {policy: [enum, always, on-failure]}]
    module: polytope/container
    args:
      image: gcr.io/arched-inkwell-420116/oauthagent:1.0.0 
      cmd: "#pt-param cmd"
      env: "#pt-param env"
      id: "#pt-param container-id"
      restart: "#pt-param restart"
      services: "#pt-param services"
  - id: oauth-agent
    info: Serves the oauth-agent
    module: oauth-agent-base
    args:
      env:
        - name: PORT
          value: 3001
        - name: TRUSTED_WEB_ORIGIN
          value: 'http://localhost:8080'
        - name: ISSUER
          value: 'https://localhost:8443/oauth/v2/oauth-anonymous'
        - name: AUTHORIZE_ENDPOINT
          value: 'https://localhost:8443/oauth/v2/oauth-authorize'
        - name: TOKEN_ENDPOINT
          value: 'https://curity:8443/oauth/v2/oauth-token'
        - name: USERINFO_ENDPOINT
          value: 'https://curity:8443/oauth/v2/oauth-userinfo'
        - name: LOGOUT_ENDPOINT
          value: 'https://localhost:8443/oauth/v2/oauth-session/logout'
        - name: CLIENT_ID
          value: 'spa-client'
        - name: CLIENT_SECRET
          value: 'Password1'
        - name: REDIRECT_URI
          value: 'http://localhost:8080/auth/callback'
        - name: POST_LOGOUT_REDIRECT_URI
          value: 'http://localhost:8080/'
        - name: SCOPE
          value: 'openid profile'
        - name: COOKIE_DOMAIN
          value: 'localhost'
        - name: COOKIE_NAME_PREFIX
          value: 'curity'
        - name: COOKIE_ENCRYPTION_KEY
          value: 'fda91643fce9af565bdc34cd965b48da75d1f5bd8846bf0910dd6d7b10f06dfe'
        - name: CORS_ENABLED
          value: 'false'
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: '0'
      restart:
        policy: on-failure
      services:
        - id: oauth-agent
          ports: [{protocol: http, port: 3001}]
  - id: kong
    module: polytope/kong!simple
    args:
      image: gcr.io/arched-inkwell-420116/kong:3.6.1
      port: 3000
      env: 
        - name: KONG_NGINX_HTTP_LUA_SHARED_DICT
          value: 'phantom-token 10m'
      plugins: 
        - name: oauth-proxy
          package: kong-oauth-proxy
          version: 1.3.0
        - name: phantom-token
          package: kong-phantom-token
          version: 2.0.0
      config-file:
        type: host
        path: ./conf/kong-dev.yml
      autoreload: true
      services:
      - id: kong
        ports:
        - port: 3000
          protocol: http
          expose-as: 8080
  - id: curity
    module: polytope/curity
    args:
      image: gcr.io/arched-inkwell-420116/idsvr:9.0.1
      password: password
      # log-level: DEBUG  # NOTE: uncomment when developing against curity
      license-file:
        type: host
        path: ./conf/curity-license.json
      config-file:
        type: host
        path: ./conf/curity-config.xml
      restart:
        policy: always
  - id: curity-db
    module: polytope/postgres
    args:
      image: gcr.io/arched-inkwell-420116/postgres:16.2
      data-volume:
        type: volume
        scope: project
        id: curity-db-data
      service-id: curity-db
      env:
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        - name: POSTGRES_DB
          value: idsvr
      scripts:
        - type: host
          path: ./conf/curity-db.sql
      restart:
        policy: on-failure
  - id: couchbase
    module: polytope/couchbase
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      data-volume:
        type: volume
        scope: project
        id: couchbase-data
  - id: init-couchbase-cluster
    module: polytope/couchbase!init-cluster
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      cluster: couchbase:8091
      username: admin
      password: password
      retries: 20
  - id: create-couchbase-bucket
    module: polytope/couchbase!create-bucket
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      cluster: couchbase:8091
      username: admin
      password: password
      name: cillers
      retries: 20
  - id: init-couchbase-bucket
    module: polytope/couchbase!cbq
    args:
      image: gcr.io/arched-inkwell-420116/couchbase:enterprise-7.6.1
      cluster: couchbase
      username: admin
      password: password
      script: |
        CREATE COLLECTION cillers._default.products IF NOT EXISTS;
        CREATE PRIMARY INDEX IF NOT EXISTS ON cillers;
        CREATE PRIMARY INDEX IF NOT EXISTS ON cillers._default.products;
      retries: 20
  - id: kafka
    module: polytope/kafka
    args:
      image: gcr.io/arched-inkwell-420116/cp-kafka:7.5.1
      root-log-level: WARN
      data-volume:
        type: volume
        scope: project
        id: kafka-data
  - id: kafka-connect
    module: polytope/kafka!connect
    args:
      image: gcr.io/arched-inkwell-420116/cp-kafka-connect:7.5.1
      connectors:
        - couchbase/kafka-connect-couchbase:4.1.13
        - confluentinc/kafka-connect-http:1.7.3
      root-log-level: WARN
  - id: create-connectors
    module: polytope/kafka!create-connectors
    args:
      image: gcr.io/arched-inkwell-420116/curl:latest
      host: kafka-connect
      connectors:
        - name: couchbase-products-sink
          config:
            name:                           couchbase-products-sink
            connector.class:                com.couchbase.connect.kafka.CouchbaseSinkConnector
            tasks.max:                      '2'
            topics:                         products
            couchbase.seed.nodes:           couchbase
            couchbase.bootstrap.timeout:    10s
            couchbase.bucket:               cillers
            couchbase.default.collection:   _default.products
            couchbase.document.id:          ${/id}
            couchbase.username:             admin
            couchbase.password:             password
            key.converter:                  org.apache.kafka.connect.storage.StringConverter
            value.converter:                org.apache.kafka.connect.json.JsonConverter
            value.converter.schemas.enable: 'false'
  - id: ngrok
    module: polytope/ngrok!http
    args:
      host: kong
      port: 3000
  - id: confluent-control-center
    module: polytope/kafka!control-center
    args:
      root-log-level: WARN
      schema-registry-url: http://schema-registry:8081
      connect-cluster-url: kafka-connect:8083
  - id: confluent-schema-registry
    module: polytope/kafka!schema-registry
    args:
      root-log-level: WARN
  - id: mailpit
    info: Mock mail server for testing.
    module: polytope/mailpit
    args:
      image: gcr.io/arched-inkwell-420116/mailpit:latest
      restart:
        policy: on-failure
      env:
        - name: MP_SMTP_AUTH_ACCEPT_ANY
          value: 1
        - name: MP_SMTP_AUTH_ALLOW_INSECURE
          value: 1
      data-volume:
        type: volume
        scope: project
        id: mailpit-data
