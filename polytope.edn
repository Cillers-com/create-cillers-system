{:modules   [{:id     :api-dev
              :module :polytope/node
              :params {:cmd      "npm run dev"
                       :code     {:type "host", :path "./app"}
                       :env      [{:name "COUCHBASE_USER", :value "admin"}
                                  {:name "COUCHBASE_PASSWORD", :value "password"}]
                       :services [{:id :api, :ports [{:protocol :http, :port 4000}]}]
                       :id       "api-container"
                       :version  "18.17.0"}}
             {:id     :spa-dev
              :module :polytope/node
              :params {:cmd     "npm run dev"
                       :code    {:type "host", :path "./website"}
                       :env     [{:name "DEBUG", :value "express:*"}]
                       :id      "spa-dev"
                       :version "18.17.0"
                       :services [{:id :website, :ports [{:protocol :http, :port 3000}]}]}}
             {:id     :input
              :module :polytope/python
              :params {:cmd      "./bin/run"
                       :code     {:type "host", :path "./input"}
                       :env      [{:name "INIT", :value "true"}
                                  {:name "APP_PORT", :value "3002"}
                                  {:name "KAFKA_BROKER", :value "kafka:9092"}
                                  {:name "KAFKA_TOPIC", :value "couchbase-sink"}]
                       :id       "input-container"
                       :services [{:id :input, :ports [{:protocol :http, :port 3002}]}]}}
             {:id     :kong-dev
              :module :polytope/kong!simple
              :params {:plugins     [{:name    "oauth-proxy"
                                      :package "kong-oauth-proxy"
                                      :version "1.3.0"}
                                     {:name    "phantom-token"
                                      :package "kong-phantom-token"
                                      :version "2.0.0"}]
                       :port        3000
                       :config-file {:type "host", :path "./conf/kong-dev.yml"}
                       :env         [{:name  "KONG_NGINX_HTTP_LUA_SHARED_DICT"
                                      :value "phantom-token 10m"}]
                       :services    [{:id :kong, :ports [{:port 3000, :protocol :http, :expose-as 80}]}]}}
             {:id     :curity-dev
              :module :polytope/curity
              :params {:password     "password"
                       :license-file {:type "host", :path "./conf/curity-license.json"}
                       :config-file  {:type "host", :path "./conf/curity-config.xml"}
                       :mounts       [{:source {:type "host", :path "./conf/couchbase-plugin"}
                                       :path   "/opt/idsvr/usr/share/plugins/couchbase"}]
                       :env          [{:name "IDSVR_BASE_URL", :value "http://login.example.com:8443"}
                                      {:name "WEB_DOMAIN", :value "www.example.com"}
                                      {:name "COUCHBASE_BUCKET", :value "default"}
                                      {:name "COUCHBASE_COLLECTION", :value "_default"}
                                      {:name "COUCHBASE_HOST", :value "couchbase"}
                                      {:name "COUCHBASE_USERNAME", :value "admin"}
                                      {:name "COUCHBASE_SCOPE", :value "_default"}
                                      {:name "COUCHBASE_PASSWORD", :value "password"}]}}
             {:id     :curity-db
              :module :polytope/postgres
              :params {:id      "curity-db"
                       :env     [{:name "POSTGRES_HOST_AUTH_METHOD", :value "trust"}
                                 {:name "POSTGRES_DB", :value "idsvr"}]
                       :scripts [{:type "host", :path "./conf/curity-db.sql"}]}}
             {:id     :init-couchbase-dev-cluster
              :module :polytope/couchbase!init-cluster
              :params {:cluster  "couchbase:8091"
                       :username "admin"
                       :password "password"}}
             {:id     :create-couchbase-dev-bucket
              :module :polytope/couchbase!create-bucket
              :params {:cluster  "couchbase:8091"
                       :username "admin"
                       :password "password"
                       :name     "default"}}
             {:id     :oauth-agent-dev
              :module :polytope/container
              :params {:image    "node:18-bullseye"
                       :cmd      "sh -c \"npm install && npm install ts-node && npm run start\""
                       :id       "oauthagent-container"
                       :env      [{:name "AUTHORIZE_ENDPOINT", :value "http://login.example.com:8443/oauth/v2/oauth-authorize"}
                                  {:name "CLIENT_ID", :value "spa-client"}
                                  {:name "CLIENT_SECRET", :value "Password1"}
                                  {:name "COOKIE_DOMAIN", :value "api.example.com"}
                                  {:name "COOKIE_ENCRYPTION_KEY", :value "278856876a04fafedcb7aa63e288579df5cf45ba2df3879fec96fe28975754f0"}
                                  {:name "COOKIE_NAME_PREFIX", :value "example"}
                                  {:name "CORS_ENABLED", :value "true"}
                                  {:name "ISSUER", :value "http://login.example.com:8443/oauth/v2/oauth-anonymous"}
                                  {:name "LOGOUT_ENDPOINT", :value "http://login.example.com:8443/oauth/v2/oauth-session/logout"}
                                  {:name "PORT", :value "3001"}
                                  {:name "POST_LOGOUT_REDIRECT_URI", :value "http://www.example.com"}
                                  {:name "REDIRECT_URI", :value "http://www.example.com"}
                                  {:name "SCOPE", :value "openid profile"}
                                  {:name "SERVER_CERT_P12_PASSWORD", :value ""}
                                  {:name "SERVER_CERT_P12_PATH", :value ""}
                                  {:name "TOKEN_ENDPOINT", :value "http://login-internal.example.com:8443/oauth/v2/oauth-token"}
                                  {:name "TRUSTED_WEB_ORIGIN", :value "http://www.example.com"}
                                  {:name "USERINFO_ENDPOINT", :value "http://login-internal.example.com:8443/oauth/v2/oauth-userinfo"}]
                       :services [{:id :oauthagent, :ports [{:protocol :http, :port 3001}]}]
                       :mounts   [{:source {:type "host", :path "./oauth-agent"}, :path "/usr/oauth-agent"}]
                       :workdir  "/usr/oauth-agent"}}
             {:id :sleep, :code (pt/sleep "5s")}
             {:id :kafka, :module :polytope/kafka}
             {:id     :kafka-connect
              :module :polytope/kafka!connect
              :params {:connectors ["couchbase/kafka-connect-couchbase:4.1.13"]}}
             {:id     :create-kafka-connectors
              :module :polytope/kafka!create-connectors
              :params {:host       "kafka-connect"
                       :connectors [{:name   "couchbase-source"
                                     :config {:name                                   "couchbase-source"
                                              :connector.class                        "com.couchbase.connect.kafka.CouchbaseSourceConnector"
                                              :tasks.max                              "2"
                                              :couchbase.topic                        "couchbase-source"
                                              :couchbase.seed.nodes                   "couchbase"
                                              :couchbase.bootstrap.timeout            "10s"
                                              :couchbase.bucket                       "default"
                                              :couchbase.username                     "admin"
                                              :couchbase.password                     "password"
                                              :key.converter                          "org.apache.kafka.connect.storage.StringConverter"
                                              :couchbase.source.handler               "com.couchbase.connect.kafka.handler.source.RawJsonSourceHandler"
                                              :value.converter                        "org.apache.kafka.connect.converters.ByteArrayConverter"
                                              :couchbase.event.filter                 "com.couchbase.connect.kafka.filter.AllPassFilter"
                                              :couchbase.stream.from                  "SAVED_OFFSET_OR_BEGINNING"
                                              :couchbase.compression                  "ENABLED"
                                              :couchbase.flow.control.buffer          "16m"
                                              :couchbase.persistence.polling.interval "100ms"}}
                                    {:name "couchbase-sink"
                                     :config {:name                           "couchbase-sink"
                                              :connector.class                "com.couchbase.connect.kafka.CouchbaseSinkConnector"
                                              :tasks.max                      "2"
                                              :topics                         "couchbase-sink"
                                              :couchbase.seed.nodes           "couchbase"
                                              :couchbase.bootstrap.timeout    "10s"
                                              :couchbase.bucket               "default"
                                              :couchbase.username             "admin"
                                              :couchbase.password             "password"
                                              :couchbase.persist.to           "NONE"
                                              :couchbase.replicate.to         "NONE"
                                              :key.converter                  "org.apache.kafka.connect.storage.StringConverter"
                                              :value.converter                "org.apache.kafka.connect.json.JsonConverter"
                                              :value.converter.schemas.enable "false"}}]}}
             {:id     :ngrok
              :module :polytope/ngrok!http
              :params {:host "kong", :port 3000}}]
 :templates [{:id        :dev
              :run-steps [{:id :couchbase, :module :polytope/couchbase}
                          {:id     :init-cb-cluster
                           :module :init-couchbase-dev-cluster}
                          {:id       :create-cb-bucket
                           :module   :create-couchbase-dev-bucket
                           :run-when {:after :init-cb-cluster}}
                          {:id       :create-cb-index
                           :run-when {:after :create-cb-bucket}
                           :params   {:cluster  "couchbase"
                                      :username "admin"
                                      :password "password"
                                      :script   "CREATE PRIMARY INDEX ON default._default._default;"}
                           :module   :polytope/couchbase!cbq}
                          :curity-db
                          :curity-dev
                          :input
                          :oauth-agent-dev
                          :kong-dev
                          :spa-dev
                          :api-dev
                          :kafka
                          :kafka-connect
                          :create-kafka-connectors
                          :ngrok
                          {:id :kcat, :module :polytope/kafka!kcat}
                          #_{:id :debug, :module :polytope/container :params {:image "wbitt/network-multitool"}}]}]}
